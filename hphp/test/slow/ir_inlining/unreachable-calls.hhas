.class [final persistent] Cls1 {
  .default_ctor;
  .method [public] N foobaz(N $a, N $b, N $c, N $d, N $e) {
    CGetL $c
    RetC
  }
}

.class [final persistent] Cls2 {
  .default_ctor;
  .method [public] N foobaz(N $a, N $b, N $c, N $d, N $e) {
    CGetL $b
    RetC
  }
}

.function N test(N $obj, N $type, N $x) {
  CGetL $type
  JmpZ cls2

  CGetL $obj
  AssertRATStk 0 Obj=Cls1
  NullUninit
  CGetL $x
  CGetL $x
  CGetL $x
  CGetL $x
  CGetL $x
  FCallObjMethodD <> 5 1 "" "" - "" "Cls1" NullThrows "foobaz"
  Jmp end

cls2:
  CGetL $obj
  AssertRATStk 0 Obj=Cls2
  NullUninit
  CGetL $x
  CGetL $x
  CGetL $x
  CGetL $x
  CGetL $x
  FCallObjMethodD <> 5 1 "" "" - "" "Cls2" NullThrows "foobaz"
  Jmp end

end:
  RetC
}

.function N test_outer(N $type, N $x) {
  .declvars $obj;
  CGetL $type
  JmpZ cls2

  NewObjD "Cls1"
  Dup
  NullUninit
  FCallCtor <LockWhileUnwinding> 0 1 "" "" - "" ""
  PopC
  LockObj
  SetL $obj
  PopC
  NullUninit
  NullUninit
  CGetL $obj
  CGetL $type
  CGetL $x
  FCallFuncD <> 3 1 "" "" - "" "test"
  RetC

cls2:
  NewObjD "Cls2"
  Dup
  NullUninit
  FCallCtor <LockWhileUnwinding> 0 1 "" "" - "" ""
  PopC
  LockObj
  SetL $obj
  PopC
  NullUninit
  NullUninit
  CGetL $obj
  CGetL $type
  CGetL $x
  FCallFuncD <> 3 1 "" "" - "" "test"
  RetC
}

.function N loop(N $type, N $total) {
  .declvars $count;
  Int 0
  SetL $count
  PopC

header:
  CGetL $count
  CGetL $total
  Lt
  JmpZ end
  NullUninit
  NullUninit
  CGetL $type
  Int 1
  FCallFuncD <> 2 1 "" "" - "" "test_outer"
  PopC

  IncDecL $count PreInc
  PopC
  Jmp header

end:
  True
  RetC
}

.function ["__EntryPoint"("""y:0:{}""")] N main() {
  NullUninit
  NullUninit
  False
  Int 40
  FCallFuncD <> 2 1 "" "" - "" "loop"
  PopC
  NullUninit
  NullUninit
  True
  Int 100
  FCallFuncD <> 2 1 "" "" - "" "loop"
  PopC

  String "DONE\n"
  Print
  RetC
}
