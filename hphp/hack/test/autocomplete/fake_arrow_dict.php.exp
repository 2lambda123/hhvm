C\any
  (function(Traversable<T> $traversable, ?(function(T): bool) $predicate = _): bool)
C\contains
  (function(readonly Traversable<T1> $traversable, readonly T2 $value): bool)
C\contains_key
  (function(readonly KeyedContainer<Tk1, Tv> $container, readonly Tk2 $key): bool)
C\count
  (function(readonly Container<mixed> $container): int)
C\every
  (function(Traversable<T> $traversable, ?(function(T): bool) $predicate = _): bool)
C\find
  (function(Traversable<T> $traversable, (function(T): bool) $value_predicate): ?T)
C\find_key
  (function(KeyedTraversable<Tk, Tv> $traversable, (function(Tv): bool) $value_predicate): ?Tk)
C\findx
  (function(Traversable<T> $traversable, (function(T): bool) $value_predicate): T)
C\first
  (function(Traversable<T> $traversable): ?T)
C\first_key
  (function(KeyedTraversable<Tk, Tv> $traversable): ?Tk)
C\first_keyx
  (function(KeyedTraversable<Tk, Tv> $traversable): Tk)
C\firstx
  (function(Traversable<T> $traversable): T)
C\is_empty
  (function(readonly Container<T> $container): bool)
C\is_sorted
  (function(Traversable<Tv> $traversable, ?(function(Tv, Tv): num) $comparator = _): bool)
C\is_sorted_by
  (function(Traversable<Tv> $traversable, (function(Tv): Ts) $scalar_func, ?(function(Ts, Ts): num) $comparator = _): bool)
C\last
  (function(Traversable<T> $traversable): ?T)
C\last_key
  (function(KeyedTraversable<Tk, Tv> $traversable): ?Tk)
C\last_keyx
  (function(KeyedTraversable<Tk, Tv> $traversable): Tk)
C\lastx
  (function(Traversable<T> $traversable): T)
C\onlyx
  (function(Traversable<T> $traversable, ?HH\Lib\Str\SprintfFormatString $format_string = _, mixed $format_args...): T)
C\reduce
  (function(Traversable<Tv> $traversable, (function(Ta, Tv): Ta) $accumulator, Ta $initial): Ta)
C\reduce_with_key
  (function(KeyedTraversable<Tk, Tv> $traversable, (function(Ta, Tk, Tv): Ta) $accumulator, Ta $initial): Ta)
Dict\associate
  (function(Traversable<Tk> $keys, Traversable<Tv> $values): dict<Tk, Tv>)
Dict\cast_clear_legacy_array_mark
  (function(KeyedTraversable<Tk, Tv> $x): dict<Tk, Tv>)
Dict\chunk
  (function(KeyedTraversable<Tk, Tv> $traversable, int $size): vec<dict<Tk, Tv>>)
Dict\count_values
  (function(Traversable<Tv> $values): dict<Tv, int>)
Dict\diff_by_key
  (function(KeyedTraversable<Tk1, Tv> $first, KeyedTraversable<Tk2, mixed> $second, KeyedContainer<Tk2, mixed> $rest...): dict<Tk1, Tv>)
Dict\drop
  (function(KeyedTraversable<Tk, Tv> $traversable, int $n): dict<Tk, Tv>)
Dict\equal
  (function(dict<Tk, Tv> $dict1, dict<Tk, Tv> $dict2): bool)
Dict\fill_keys
  (function(Traversable<Tk> $keys, Tv $value): dict<Tk, Tv>)
Dict\filter
  (function(KeyedTraversable<Tk, Tv> $traversable, ?(function(Tv): bool) $value_predicate = _): dict<Tk, Tv>)
Dict\filter_async
  (function(KeyedContainer<Tk, Tv> $traversable, (function(Tv): Awaitable<bool>) $value_predicate): Awaitable<dict<Tk, Tv>>)
Dict\filter_keys
  (function(KeyedTraversable<Tk, Tv> $traversable, ?(function(Tk): bool) $key_predicate = _): dict<Tk, Tv>)
Dict\filter_nulls
  (function(KeyedTraversable<Tk, ?Tv> $traversable): dict<Tk, Tv>)
Dict\filter_with_key
  (function(KeyedTraversable<Tk, Tv> $traversable, (function(Tk, Tv): bool) $predicate): dict<Tk, Tv>)
Dict\filter_with_key_async
  (function(KeyedContainer<Tk, Tv> $traversable, (function(Tk, Tv): Awaitable<bool>) $predicate): Awaitable<dict<Tk, Tv>>)
Dict\flip
  (function(KeyedTraversable<Tk, Tv> $traversable): dict<Tv, Tk>)
Dict\from_keys
  (function(Traversable<Tk> $keys, (function(Tk): Tv) $value_func): dict<Tk, Tv>)
Dict\from_keys_async
  (function(Traversable<Tk> $keys, (function(Tk): Awaitable<Tv>) $async_func): Awaitable<dict<Tk, Tv>>)
Dict\from_values
  (function(Traversable<Tv> $values, (function(Tv): Tk) $key_func): dict<Tk, Tv>)
Dict\group_by
  (function(Traversable<Tv> $values, (function(Tv): ?Tk) $key_func): dict<Tk, vec<Tv>>)
Dict\map
  (function(KeyedTraversable<Tk, Tv1> $traversable, (function(Tv1): Tv2) $value_func): dict<Tk, Tv2>)
Dict\map_async
  (function(KeyedTraversable<Tk, Tv1> $traversable, (function(Tv1): Awaitable<Tv2>) $value_func): Awaitable<dict<Tk, Tv2>>)
Dict\map_keys
  (function(KeyedTraversable<Tk1, Tv> $traversable, (function(Tk1): Tk2) $key_func): dict<Tk2, Tv>)
Dict\map_with_key
  (function(KeyedTraversable<Tk, Tv1> $traversable, (function(Tk, Tv1): Tv2) $value_func): dict<Tk, Tv2>)
Dict\map_with_key_async
  (function(KeyedTraversable<Tk, Tv1> $traversable, (function(Tk, Tv1): Awaitable<Tv2>) $async_func): Awaitable<dict<Tk, Tv2>>)
Dict\merge
  (function(KeyedTraversable<Tk, Tv> $first, KeyedContainer<Tk, Tv> $rest...): dict<Tk, Tv>)
Dict\partition
  (function(KeyedTraversable<Tk, Tv> $traversable, (function(Tv): bool) $predicate): (dict<Tk, Tv>, dict<Tk, Tv>))
Dict\partition_with_key
  (function(KeyedTraversable<Tk, Tv> $traversable, (function(Tk, Tv): bool) $predicate): (dict<Tk, Tv>, dict<Tk, Tv>))
Dict\pull
  (function(Traversable<Tv1> $traversable, (function(Tv1): Tv2) $value_func, (function(Tv1): Tk) $key_func): dict<Tk, Tv2>)
Dict\pull_with_key
  (function(KeyedTraversable<Tk1, Tv1> $traversable, (function(Tk1, Tv1): Tv2) $value_func, (function(Tk1, Tv1): Tk2) $key_func): dict<Tk2, Tv2>)
Dict\reverse
  (function(KeyedTraversable<Tk, Tv> $traversable): dict<Tk, Tv>)
Dict\select_keys
  (function(KeyedContainer<Tk, Tv> $container, Traversable<Tk> $keys): dict<Tk, Tv>)
Dict\shuffle
  (function(KeyedTraversable<Tk, Tv> $container): dict<Tk, Tv>)
Dict\sort
  (function(KeyedTraversable<Tk, Tv> $traversable, ?(function(Tv, Tv): num) $value_comparator = _): dict<Tk, Tv>)
Dict\sort_by
  (function(KeyedTraversable<Tk, Tv> $traversable, (function(Tv): Ts) $scalar_func, ?(function(Ts, Ts): num) $scalar_comparator = _): dict<Tk, Tv>)
Dict\sort_by_key
  (function(KeyedTraversable<Tk, Tv> $traversable, ?(function(Tk, Tk): num) $key_comparator = _): dict<Tk, Tv>)
Dict\take
  (function(KeyedTraversable<Tk, Tv> $traversable, int $n): dict<Tk, Tv>)
Dict\unique
  (function(KeyedTraversable<Tk, Tv> $traversable): dict<Tk, Tv>)
Dict\unique_by
  (function(KeyedContainer<Tk, Tv> $container, (function(Tv): Ts) $scalar_func): dict<Tk, Tv>)
Keyset\chunk
  (function(Traversable<Tv> $traversable, int $size): vec<keyset<Tv>>)
Keyset\diff
  (function(Traversable<Tv1> $first, Traversable<Tv2> $second, Container<Tv2> $rest...): keyset<Tv1>)
Keyset\drop
  (function(Traversable<Tv> $traversable, int $n): keyset<Tv>)
Keyset\filter
  (function(Traversable<Tv> $traversable, ?(function(Tv): bool) $value_predicate = _): keyset<Tv>)
Keyset\filter_async
  (function(Container<Tv> $container, (function(Tv): Awaitable<bool>) $value_predicate): Awaitable<keyset<Tv>>)
Keyset\filter_nulls
  (function(Traversable<?Tv> $traversable): keyset<Tv>)
Keyset\filter_with_key
  (function(KeyedTraversable<Tk, Tv> $traversable, (function(Tk, Tv): bool) $predicate): keyset<Tv>)
Keyset\intersect
  (function(Traversable<Tv> $first, Traversable<Tv> $second, Container<Tv> $rest...): keyset<Tv>)
Keyset\keys
  (function(KeyedTraversable<Tk, Tv> $traversable): keyset<Tk>)
Keyset\map
  (function(Traversable<Tv1> $traversable, (function(Tv1): Tv2) $value_func): keyset<Tv2>)
Keyset\map_async
  (function(Traversable<Tv> $traversable, (function(Tv): Awaitable<Tk>) $async_func): Awaitable<keyset<Tk>>)
Keyset\map_with_key
  (function(KeyedTraversable<Tk, Tv1> $traversable, (function(Tk, Tv1): Tv2) $value_func): keyset<Tv2>)
Keyset\partition
  (function(Traversable<Tv> $traversable, (function(Tv): bool) $predicate): (keyset<Tv>, keyset<Tv>))
Keyset\partition_async
  (function(Container<Tv> $container, (function(Tv): Awaitable<bool>) $value_predicate): Awaitable<(keyset<Tv>, keyset<Tv>)>)
Keyset\sort
  (function(Traversable<Tv> $traversable, ?(function(Tv, Tv): num) $comparator = _): keyset<Tv>)
Keyset\take
  (function(Traversable<Tv> $traversable, int $n): keyset<Tv>)
Keyset\union
  (function(Traversable<Tv> $first, Container<Tv> $rest...): keyset<Tv>)
Str\join
  (function(readonly Traversable<arraykey> $pieces, string $glue): string)
Vec\cast_clear_legacy_array_mark
  (function(Traversable<T> $x): vec<T>)
Vec\chunk
  (function(Traversable<Tv> $traversable, int $size): vec<vec<Tv>>)
Vec\concat
  (function(Traversable<Tv> $first, Container<Tv> $rest...): vec<Tv>)
Vec\diff
  (function(Traversable<Tv1> $first, Traversable<Tv2> $second, Container<Tv2> $rest...): vec<Tv1>)
Vec\diff_by
  (function(Traversable<Tv> $first, Traversable<Tv> $second, (function(Tv): Ts) $scalar_func): vec<Tv>)
Vec\drop
  (function(Traversable<Tv> $traversable, int $n): vec<Tv>)
Vec\filter
  (function(Traversable<Tv> $traversable, ?(function(Tv): bool) $value_predicate = _): vec<Tv>)
Vec\filter_async
  (function(Container<Tv> $container, (function(Tv): Awaitable<bool>) $value_predicate): Awaitable<vec<Tv>>)
Vec\filter_nulls
  (function(Traversable<?Tv> $traversable): vec<Tv>)
Vec\filter_with_key
  (function(KeyedTraversable<Tk, Tv> $traversable, (function(Tk, Tv): bool) $predicate): vec<Tv>)
Vec\intersect
  (function(Traversable<Tv> $first, Traversable<Tv> $second, Container<Tv> $rest...): vec<Tv>)
Vec\keys
  (function(KeyedTraversable<Tk, Tv> $traversable): vec<Tk>)
Vec\map
  (function(Traversable<Tv1> $traversable, (function(Tv1): Tv2) $value_func): vec<Tv2>)
Vec\map_async
  (function(Traversable<Tv1> $traversable, (function(Tv1): Awaitable<Tv2>) $async_func): Awaitable<vec<Tv2>>)
Vec\map_with_key
  (function(KeyedTraversable<Tk, Tv1> $traversable, (function(Tk, Tv1): Tv2) $value_func): vec<Tv2>)
Vec\partition
  (function(Traversable<Tv> $traversable, (function(Tv): bool) $predicate): (vec<Tv>, vec<Tv>))
Vec\partition_async
  (function(Container<Tv> $container, (function(Tv): Awaitable<bool>) $value_predicate): Awaitable<(vec<Tv>, vec<Tv>)>)
Vec\reverse
  (function(Traversable<Tv> $traversable): vec<Tv>)
Vec\sample
  (function(Traversable<Tv> $traversable, int $sample_size): vec<Tv>)
Vec\shuffle
  (function(Traversable<Tv> $traversable): vec<Tv>)
Vec\slice
  (function(Container<Tv> $container, int $offset, ?int $length = _): vec<Tv>)
Vec\sort
  (function(Traversable<Tv> $traversable, ?(function(Tv, Tv): num) $comparator = _): vec<Tv>)
Vec\sort_by
  (function(Traversable<Tv> $traversable, (function(Tv): Ts) $scalar_func, ?(function(Ts, Ts): num) $comparator = _): vec<Tv>)
Vec\take
  (function(Traversable<Tv> $traversable, int $n): vec<Tv>)
Vec\unique
  (function(Traversable<Tv> $traversable): vec<Tv>)
Vec\unique_by
  (function(Traversable<Tv> $traversable, (function(Tv): Ts) $scalar_func): vec<Tv>)
Vec\zip
  (function(Traversable<Tv> $first, Traversable<Tu> $second): vec<(Tv, Tu)>)
