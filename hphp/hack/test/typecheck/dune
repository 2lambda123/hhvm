(* -*- tuareg -*- *)

(* dune doesn't support recursive global search so we implement it
   ourselves since there are way too many files in test/typecheck
*)
let rec sub_folder f acc abs_path rel_path =
  if Sys.file_exists abs_path && Sys.is_directory abs_path then
    let acc = f (abs_path, rel_path) acc in
    let sub = Sys.readdir abs_path in
    Array.fold_left
      (fun acc name ->
        sub_folder
          f
          acc
          (Filename.concat abs_path name)
          (Filename.concat rel_path name))
      acc
      sub
  else
    acc

let generate_sub_folders dir rel_dir =
  sub_folder (fun x y -> x :: y) [] dir rel_dir

let generate_glob file = Printf.sprintf "(glob_files %%{project_root}/hack/%s)" file

let generate_hh_flags dirs =
  let aux acc (abs_dir, rel_dir) =
    let absname = Filename.concat abs_dir "HH_FLAGS" in
    let name = Filename.concat rel_dir "HH_FLAGS" in
    if Sys.file_exists absname then
      generate_glob name :: acc
    else
      acc
  in
  List.fold_left aux [] dirs

let generate_patterns dirs pattern acc =
  let aux acc (_, dir) =
    let name = Filename.concat dir pattern in
    generate_glob name :: acc
  in
  List.fold_left aux acc dirs

let deps files =
  Printf.sprintf
    "      (deps %%{exe:../../src/hh_single_type_check.exe}
          %%{project_root}/hack/test/verify.py
          %%{project_root}/hack/test/review.sh
          %%{project_root}/hack/test/hhi/coeffects.hhi
          %%{project_root}/hack/test/hhi/expr_tree.hhi
          %%{project_root}/hack/test/hhi/XHPTest.hhi
          %s)"
    (String.concat "\n          " files)

let command flags =
  Printf.sprintf
    "    (action (run %%{project_root}/hack/test/verify.py %%{project_root}/hack/test/typecheck
          --program %%{exe:../../src/hh_single_type_check.exe}
          %s))"
    flags

let make_target name ~dep_files flags =
  Printf.sprintf
    "
(rule
    (alias %s)
    %s
    %s)
"
    name
    (deps dep_files)
    (command flags)

let () =
  (* we are in test/typecheck *)
  let test_dir = Sys.getcwd () in
  let subdirs = generate_sub_folders test_dir "test/typecheck" in
  let files_hh = generate_hh_flags subdirs in
  let files_php = generate_patterns subdirs "*.php" files_hh in
  let files_tc = generate_patterns subdirs "*.php-only-typecheck" files_php in
  let files_tc = generate_patterns subdirs "*.exp" files_tc in
  let files_tc = generate_patterns subdirs "*.json" files_tc in
  let files_dc = generate_patterns subdirs "*.decl_exp" files_php in

  (* typecheck *)
  let header = Printf.sprintf "; in %s" test_dir in
  let typecheck =
    make_target
      "typecheck"
      "--batch
      --flags
      --error-format raw"
      ~dep_files:files_tc
  in
  let typecheck_shallow_decl =
    make_target
      "typecheck_shallow_decl"
      "--batch
      --out-extension .shallow_decl.out
      --expect-extension .shallow_decl.exp
      --fallback-expect-extension .exp
      --flags
      --shallow-class-decl
      --out-extension .shallow_decl.out
      --error-format raw"
      ~dep_files:files_tc
  in
  let typecheck_w_timeout =
    make_target
      "typecheck_w_timeout"
      "--timeout 20
      --verbose
      --flags
      --shallow-class-decl
      --error-format raw"
      ~dep_files:files_tc
  in
  let decl_compare =
    make_target
      "decl_compare"
      "--batch --out-extension .decl_out --expect-extension .decl_exp --flags --decl-compare"
      ~dep_files:files_dc
  in
  let run_tests =
    Printf.sprintf
      "

(alias
  (name runtest)
  (deps
    (alias typecheck)
    (alias decl_compare)
    (alias typecheck_shallow_decl)))"
  in

  let dune_file =
    header
    ^ typecheck
    ^ typecheck_shallow_decl
    ^ decl_compare
    ^ typecheck_w_timeout
    ^ run_tests
  in
  Jbuild_plugin.V1.send dune_file
